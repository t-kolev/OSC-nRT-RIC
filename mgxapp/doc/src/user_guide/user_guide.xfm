.if false
.** vi: ts=4 sw=4 noet:

==================================================================================
    Copyright (c) 2020 AT&T Intellectual Property.
    Copyright (c) 2020 Nokia

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
==================================================================================

.fi

.if false

    Mnemonic:	user_guide.xfm
    Abstract:	This is the source for the munchkin user guide. It can be used to
				generate the RST user guide as required by the o-ran fiats, and
				can be used to generate the more useful man page and PDF documents.

    Date:       9 July 2020
    Author:     E. Scott Daniels
.fi

.** titles must be defined before front junk is included
.dv doc_title User's Guide
.dv doc_subtitle RIC Metrics Gateway
.dv original_date 10 July 2020

.gv e IN_FILE doc_name
.im ../lib/setup.im
.im ../lib/front_junk.im

.hn off

.** -------------------------------------------------------------------------------------------

.**  pick up the common macro {X}fm definitions based on output type
.dv col_width 6.5i
.dv col_indent .75i
.im cmd_master.im
&line_len(6i)

.** this is needed for RST generation as the latest RTD parser doesn't wrap lines in a table
.** unless we force it to do so by adding blank lines between each.
&force_diterm_breaks

.** trim spaces until {X} cmd macros are fixed
.** .dv di        ^&row_sep  * -  **${*1}** .in +&_ch2 - .in +&_ch2 .dv row_sep .sp 1 | .in -&{_ch4} .sp 1 ^:


.**  The spacing in the {X}fm default is too much IMHO; reduce for h2
.if pfm
	.dh 2 s=1,.5
.fi

.** common macro for some output types is missing this
.if ! half_space
	.dv half_space .sp .5i
.fi


.** munchkin was the working name prior to settling on the formal name...
.dv munchkin ^&ital( Metrics Gateway )

.** -------------- main document ---------------------------------------------------

&h1( Overview )
The &munchkin is an RMR based RIC xAPP designed to listen for &cw( RIC_METRICS ) messages
.dv munchkin Metrics Gateway
forwarding the data from these messages to some statistics consumer.
Currently the consumer is the VES collector.


&h1( Inbound Messages )
Messages sent via RMR with the message type &cw( RIC_METRICS )should be automatically
routed to the &munchkin .sm .
The messages are expected to have a json payload which contains the following
information, illustrated in figure &payload_fig, with the schema shown
in figure &schema_fig:

&half_space
&indent
&beg_dlist( 1i Helevetica-bold : : 15,80 )
&di(Source) The name of the application which is sending the status value(s).
    If omitted the source from the RMR message (hostname:port) is used.

&half_space
&di(Generator) The name of the application which generated the value.
    If omitted the &ital( source ) is used.

&half_space
&di(Timestamp) This is an integer value which is the number of milliseconds since the
    UNIX epoch (Jan 1, 1970) and is forwarded as the time that the value was captured.
    If omitted, the time that the message is received by the &munchkin is used (not
    recommended).

&half_space
&di(Data) The data array is an array with one or more objects that define a specific statistic (measurement).
	Each object must specify an &cw(ID) and &cw(value,) and may optionally supply a type.
	(The type is not currently used, but might in the future be used to identify
	the value as a counter, meter value, percentage, or similar classification that
	is meaningful to the  process that the &munchkin is forwarding to.
&end_dlist
&uindent

.ca start payload.ca
&ex_start
  {
    "msg_source": "state_mon86",
    "value_source": "device89.port219",
    "timestamp": 515300400000,
    "data": [
      {
        "id": "voltage",
        "type": "value",
        "value":  110.0430,
      }
    ]
  }
&ex_end
&export_fig( payload_fig )
&fig( Sample json payload for a single value. )
&space
.ca end
.gv remain
&ifroom( 2i : payload.ca )

&space
If the xAPP is using a framework, it is likely that the framework provides the API for creating
and sending messages to the &munchkin.


.ca start schema.ca
&ex_start
{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "properties": {
    "msg_source": {
      "description": "the system or process sending the message",
      "default":  "the RMR source string (host:port)",
      "type": "string"
    },
    "vlaue_source": {
      "description": "the system or process which took the measurement",
      "default": "msg_source is assumed to be the generator if this is omitted",
      "type": "string"
    },
    "timestamp": {
      "description": "milliseconds past the UNIX epoch; e.g. 1594298319000 == 2020/07/09 08:38:39.000 UTC-4",
      "default":  "the message arrival time"
      "type": "integer"
    },
    "data": {
      "description": "one or more statistics measurements",
      "type": "array",
      "items": [
        {
          "type": "object",
          "properties": {
            "id": {
              "description": "measurement name",
              "type": "string"
            },
            "type": {
              "description": "future: measurement type such as counter, value, or similar",
              "type": "string"
            },
            "value": {
              "description": "actual value; treated as a double when forwarded",
              "type": "number"
            }
          },
          "required": [
            "id",
            "value"
          ]
        }
      ]
    }
  },
  "required": [
    "data"
  ]
}
&ex_end
&export_fig( schema_fig )
&fig( The schema for the json payload expected by the &munchkin. )
&space
.ca end
.gv remain
&ifroom( 4i : schema.ca )

&h1(Forwarding Expectations)
The &munchkin expects that the data which it forwards is sent as a json payload
to the URL defined via command line paramter or as a field in the &cw(controls)
section of the configuration file.
Currently the &munchkin assumes that the target is the VES collction application
and accepts messages as defined by the specification(s) at the following
site:

&half_space
&ex_start
docs.onap.org/en/elalto/submodules/vnfrqts/requirements.git/docs/Chapter8/ves7_1spec.html
&ex_end
&space

&h1(Execution)
The &munchkin is a single binary which can be executed as a stand alone container.
The binary is &cw(munchkin) and is installed by default in &cw(/usr/local/bin.)

&h2(Environment Variables)
The usual RMR environment variables will have the expected effect if they are
set when the process is invoked.
Currently the &munchkin does not expect, or use, any environment variables;
all configuration is controlled by command line options and/or the configuration
file.
.if false
In addition, the &munchkin specific environment variable &cw(SG_TARGET_URL) can be
used to set the URL of the collection process.
.fi

&h2(Command Line Options)
The process allows several options to be supplied on the command line.
The assumption is that none will be necessary for the general execution case, but
these options provide flexibility for testing, and should the process need to be
colocated with another xAPP in a single container.
The following is a list of command line options which are supported:
&half_space

&indent
&beg_dlist( 1i Helevetica-bold : : 15,80 )
&di( -d ) Places logging into &ital( debug ) mode.

&half_space
&di( -c config-file ) Supplies the name of the configuration file. (Described in a later section.)

&half_space
&di( -l filename ) Writes the standard error messages to the named file rather
	than to standard error.  Implies human readable format (the RIC logging library
	makes no provision to redirect messages).
	(This option is a lower case 'L.')

&half_space
&di( -t n )  Number of threads.
	This is passed to the framework and allows for multiple concurrent callback threads
	to be created.
	Currently it is not anticipated that this will be needed.

&half_space
&di( -P port-name ) Supplies the port name that should be matched in the &ital(messaging)
	section of the configuration file.
	This option is valid only when the &cw(-c) option is supplied and &bold(must) be
	placed on the command line &bold(before) the &cw(-c) option.
	When not supplied, the port name that will be lifted from the config is &ital(rmr-data.)

&half_space
&di( -r ) Enable human readable messages written by the &munchkin.
	By default, the &munchkin uses the RIC logging library which generates unfriendly
	json encrusted output; this turns that off.

&half_space
&di( -T url ) The URL of the process that is the target of &munchkin output.

&half_space
&di( -v ) Verbose mode.
	The &munchkin will  be chatty to the standard error device.

&half_space
&di( -V ) Verbose mode.
	The &munchkin will  be chatty to the standard error device but will write human
	readable messages and not json encrusted log messages.

&half_space
&di( -w ) Wait for RMR route table.  Normally the &munchkin does not need to
	wait for an RMR route table to arrive before it can start processing. Should
	that need arise, this option will put the &munchkin into a hold until the table
	is received and validated.

&end_dlist
&uindent


&h2(The Configuration File)
The xAPP descriptor can be supplied to the &munchkin and will be used as the source for
configuration data.
Specifically the file is assumed to be valid json, and only the &cw(controls) and &cw(messaging)
sections are used.
Figure &config_fig illustrates an example of these sections.

.ca start config.ca
&ex_start

  "messaging": {
    "ports": [
      {
        "name": "rmr-data",
        "container": "mgxapp",
        "port": 4560,
        "rxMessages":
        [
          "RIC_METRICS"
        ],
        "description": "sgxapp listens on this port for RMR messages."
      },
      {
        "name": "rmr_route",
        "container": "mgxapp",
        "port": 4561,
        "description": "mgxapp listens on this port for RMR route messages"
      }
    ]
  },

  "controls": {
    "collector_url": "https://ves_collector:43086",
	"hr_logs":	false,
    "log_file": "/dev/stderr",
    "log_level": "warn",
    "wait4rt":	false
  },
&ex_end
&export_fig( config_fig )
&fig(Sections from a configuration file processed by the &munchkin)
&space
.ca end


.gv remain
&ifroom( 3.5i : config.ca )

&h3(The Messaging Section)
The messaging section in the configuration file is assumed to have an array of
port objects.
The &munchkin will examine each until it finds the expected port &ital(name)
("rmr-data" by default) and will use the port associated with the
The command line flag &cw(-P) can be used to supply an alternate port name
when necessary.
All other fields in each port object are ignored and are assumed to be used
by other container management functions.

&h3(The Controls Section)
The &cw(controls) section is analogous  to the command line options and
supplies most of the same information that can be supplied from the command line.
The following lists the fields which the &munchkin recognises from this section.

.cc 3i
&half_space
&indent
&beg_dlist( 1i Helvetica-bold : : 15,80 )
&di( collector_url )	Defines the URL that the &munchkin will forward metrics to.

&half_space
&di( log_file ) Supplies a destination for messages which are normally written to
	the standard error.
	This applies only if the human readable messages option is true as the RIC
	logging library makes no provision for capturing log messages in a named file.

&half_space
&di( wait4rt )	Causes the &munchkin to wait for an RMR route table to be received and
	installed before starting.
	Normally a route table is not needed by the &munchkin, so processing can begin
	before any route table is received.

&half_space
&di( hr_logs ) When set to &cw(true) causes human readable messages to be written to
	standard error rather than the json encrusted messages generated by the RIC
	logging library.
	The default if omitted is &cw(false.)

&half_space
&di( log_level ) Defines the log level which should be one of the following strings:
	&cw(crit, err, warn, info, ) or &cw(debug.)
	If not supplied, the default is &cw(warn.)
&end_dlist
&uindent
&space

&h2(Combining Options and Config File)
It is possible to provide the &munchkin with a configuration file and to override
any values in the configuration file with command line options.
It is also possible to set options on the command line which are treated as
defaults should the value not exist in the &cw(controls) section of the configuration
file.
These are both accomplished by carefully ordering the command line options when
starting the &munchkin.

&space
All options which appear on the command line &bold(before) the &cw(-c) are treated
as default values.
These values will be used only if they are &bold(not) defined in the configuration
file.
Any options placed on the command line after the &cw(-c) option are considered to
be overrides to any information in the configuration file.
This is illustrated in figure &override_fig.

&half_space
&ex_start
  munchkin -l /var/munchkin/log/msgs -c /var/munchkin/config.json -p 39282
&ex_end
&export_fig( override_fig )
&fig( Sample command line where port overrides the configuration file. )

&space
In figure &override_fig The &cw(-l) (lower case L) option provides the default file for message
that would normally be written to standard error.
If the config file contains the &cw(log_file) field, then that value will
be used instead of the filename given on the command line.
The port (-p) is placed on the command line after the configuration file
option, and thus the indicated port will be used regardless of what is in
the configuration file.

.pa
