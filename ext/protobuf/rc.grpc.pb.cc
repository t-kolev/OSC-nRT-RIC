// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rc.proto

#include "rc.pb.h"
#include "rc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace rc {

static const char* MsgComm_method_names[] = {
  "/rc.MsgComm/SendRICControlReqServiceGrpc",
};

std::unique_ptr< MsgComm::Stub> MsgComm::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MsgComm::Stub> stub(new MsgComm::Stub(channel));
  return stub;
}

MsgComm::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SendRICControlReqServiceGrpc_(MsgComm_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MsgComm::Stub::SendRICControlReqServiceGrpc(::grpc::ClientContext* context, const ::rc::RicControlGrpcReq& request, ::rc::RicControlGrpcRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendRICControlReqServiceGrpc_, context, request, response);
}

void MsgComm::Stub::experimental_async::SendRICControlReqServiceGrpc(::grpc::ClientContext* context, const ::rc::RicControlGrpcReq* request, ::rc::RicControlGrpcRsp* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendRICControlReqServiceGrpc_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::rc::RicControlGrpcRsp>* MsgComm::Stub::AsyncSendRICControlReqServiceGrpcRaw(::grpc::ClientContext* context, const ::rc::RicControlGrpcReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rc::RicControlGrpcRsp>::Create(channel_.get(), cq, rpcmethod_SendRICControlReqServiceGrpc_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rc::RicControlGrpcRsp>* MsgComm::Stub::PrepareAsyncSendRICControlReqServiceGrpcRaw(::grpc::ClientContext* context, const ::rc::RicControlGrpcReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rc::RicControlGrpcRsp>::Create(channel_.get(), cq, rpcmethod_SendRICControlReqServiceGrpc_, context, request, false);
}

MsgComm::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MsgComm_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MsgComm::Service, ::rc::RicControlGrpcReq, ::rc::RicControlGrpcRsp>(
          std::mem_fn(&MsgComm::Service::SendRICControlReqServiceGrpc), this)));
}

MsgComm::Service::~Service() {
}

::grpc::Status MsgComm::Service::SendRICControlReqServiceGrpc(::grpc::ServerContext* context, const ::rc::RicControlGrpcReq* request, ::rc::RicControlGrpcRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rc

