/*
==================================================================================
  Copyright (c) 2021 Samsung

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   This source code is part of the near-RT RIC (RAN Intelligent Controller)
   platform project (RICP).
==================================================================================
*/
// Code generated by go-swagger; DO NOT EDIT.

package a1_mediator

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// A1ControllerCreateOrReplacePolicyInstanceHandlerFunc turns a function with the right signature into a a1 controller create or replace policy instance handler
type A1ControllerCreateOrReplacePolicyInstanceHandlerFunc func(A1ControllerCreateOrReplacePolicyInstanceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn A1ControllerCreateOrReplacePolicyInstanceHandlerFunc) Handle(params A1ControllerCreateOrReplacePolicyInstanceParams) middleware.Responder {
	return fn(params)
}

// A1ControllerCreateOrReplacePolicyInstanceHandler interface for that can handle valid a1 controller create or replace policy instance params
type A1ControllerCreateOrReplacePolicyInstanceHandler interface {
	Handle(A1ControllerCreateOrReplacePolicyInstanceParams) middleware.Responder
}

// NewA1ControllerCreateOrReplacePolicyInstance creates a new http.Handler for the a1 controller create or replace policy instance operation
func NewA1ControllerCreateOrReplacePolicyInstance(ctx *middleware.Context, handler A1ControllerCreateOrReplacePolicyInstanceHandler) *A1ControllerCreateOrReplacePolicyInstance {
	return &A1ControllerCreateOrReplacePolicyInstance{Context: ctx, Handler: handler}
}

/* A1ControllerCreateOrReplacePolicyInstance swagger:route PUT /A1-P/v2/policytypes/{policy_type_id}/policies/{policy_instance_id} A1 Mediator a1ControllerCreateOrReplacePolicyInstance

Create or replace a policy instance of type policy_type_id. The schema of the PUT body is defined by the create_schema field of the policy type.


*/
type A1ControllerCreateOrReplacePolicyInstance struct {
	Context *middleware.Context
	Handler A1ControllerCreateOrReplacePolicyInstanceHandler
}

func (o *A1ControllerCreateOrReplacePolicyInstance) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewA1ControllerCreateOrReplacePolicyInstanceParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
