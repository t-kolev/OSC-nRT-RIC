#!/usr/bin/env bash
# vim: ts=4 sw=4 noet:
#----------------------------------------------------------------------------------
#
#	Copyright (c) 2018-2019 AT&T Intellectual Property.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#	   http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#---------------------------------------------------------------------------------

# provide help from the docker run command:
#	docker run -it --rm <container-name> help


cat <<endKat

The mc_listener image

Listener
This image contains, as the primary application, the mc_listener. Simply 
running the image in a container will start the listener. 


Replay
The image also contains a replay binary which has the ability to read a
raw data capture (rdc) file generated by the listener, and to "replay"
the messages by writing them to the appropriate FIFOs in the same manner
as the mc_listener application.  This binary is run using the run_replay.sh
script, and can be piped the file from the native environment:

  docker run -i --rm -v /var/lib/mc/listener:/var/lib/mc/listener run_replay.sh <data-file

Alternately, if multiple data files are to be given as input, something like
the following can be used:

  cat MLCT_* | docker run -i --rm -v /var/lib/mc/listener:/var/lib/mc/listener run_replay.sh

where 'data-file' as the rdc data. The timestamps in the original data are
preserved, but there is no effort to simulate the rate; messages from the raw
data will be written to the FIFOs as fast as possible.  The directory that
the replay binary should write FIFOs to should be mounted (as the example is 
above). If an alternate path must be used, it must be supplied using the -d path
command line option to run_replay.sh.  

The replay script supports pre-creating the FIFOs either from a list of known
and/or expected message types, or by parsing the input file to determine the
types contained. Use the '-p' option on the run_replay script command line to
enable pre-creation, and -m "list" to supply a list of message types (e.g.
-m 1,2,3,10002).  

If coordination with a FIFO reader is needed, there are two options to delay
the start of the replay binary.  The '-g file' will cause the run script to
wait until the gate file "file" exists before starting the reader.  This pause
happens after FIFO creation if -p is given.  Additionally, a delay in seconds
can be given with the -D seconds command line option.  After creating FIFOs, 
and optionally waiting for the gate file, the script will delay an additional
number of seconds before starting the replay process.

endKat
