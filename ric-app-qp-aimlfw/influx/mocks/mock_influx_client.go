// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/influxdata/influxdb-client-go/v2 (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	influxdb2 "github.com/influxdata/influxdb-client-go/v2"
	api "github.com/influxdata/influxdb-client-go/v2/api"
	http "github.com/influxdata/influxdb-client-go/v2/api/http"
	domain "github.com/influxdata/influxdb-client-go/v2/domain"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// APIClient mocks base method.
func (m *MockClient) APIClient() *domain.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIClient")
	ret0, _ := ret[0].(*domain.Client)
	return ret0
}

// APIClient indicates an expected call of APIClient.
func (mr *MockClientMockRecorder) APIClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIClient", reflect.TypeOf((*MockClient)(nil).APIClient))
}

// AuthorizationsAPI mocks base method.
func (m *MockClient) AuthorizationsAPI() api.AuthorizationsAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizationsAPI")
	ret0, _ := ret[0].(api.AuthorizationsAPI)
	return ret0
}

// AuthorizationsAPI indicates an expected call of AuthorizationsAPI.
func (mr *MockClientMockRecorder) AuthorizationsAPI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizationsAPI", reflect.TypeOf((*MockClient)(nil).AuthorizationsAPI))
}

// BucketsAPI mocks base method.
func (m *MockClient) BucketsAPI() api.BucketsAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BucketsAPI")
	ret0, _ := ret[0].(api.BucketsAPI)
	return ret0
}

// BucketsAPI indicates an expected call of BucketsAPI.
func (mr *MockClientMockRecorder) BucketsAPI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BucketsAPI", reflect.TypeOf((*MockClient)(nil).BucketsAPI))
}

// Close mocks base method.
func (m *MockClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// DeleteAPI mocks base method.
func (m *MockClient) DeleteAPI() api.DeleteAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAPI")
	ret0, _ := ret[0].(api.DeleteAPI)
	return ret0
}

// DeleteAPI indicates an expected call of DeleteAPI.
func (mr *MockClientMockRecorder) DeleteAPI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPI", reflect.TypeOf((*MockClient)(nil).DeleteAPI))
}

// HTTPService mocks base method.
func (m *MockClient) HTTPService() http.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPService")
	ret0, _ := ret[0].(http.Service)
	return ret0
}

// HTTPService indicates an expected call of HTTPService.
func (mr *MockClientMockRecorder) HTTPService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPService", reflect.TypeOf((*MockClient)(nil).HTTPService))
}

// Health mocks base method.
func (m *MockClient) Health(arg0 context.Context) (*domain.HealthCheck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", arg0)
	ret0, _ := ret[0].(*domain.HealthCheck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Health indicates an expected call of Health.
func (mr *MockClientMockRecorder) Health(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockClient)(nil).Health), arg0)
}

// LabelsAPI mocks base method.
func (m *MockClient) LabelsAPI() api.LabelsAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelsAPI")
	ret0, _ := ret[0].(api.LabelsAPI)
	return ret0
}

// LabelsAPI indicates an expected call of LabelsAPI.
func (mr *MockClientMockRecorder) LabelsAPI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelsAPI", reflect.TypeOf((*MockClient)(nil).LabelsAPI))
}

// Options mocks base method.
func (m *MockClient) Options() *influxdb2.Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options")
	ret0, _ := ret[0].(*influxdb2.Options)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockClientMockRecorder) Options() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockClient)(nil).Options))
}

// OrganizationsAPI mocks base method.
func (m *MockClient) OrganizationsAPI() api.OrganizationsAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationsAPI")
	ret0, _ := ret[0].(api.OrganizationsAPI)
	return ret0
}

// OrganizationsAPI indicates an expected call of OrganizationsAPI.
func (mr *MockClientMockRecorder) OrganizationsAPI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationsAPI", reflect.TypeOf((*MockClient)(nil).OrganizationsAPI))
}

// Ping mocks base method.
func (m *MockClient) Ping(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockClientMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockClient)(nil).Ping), arg0)
}

// QueryAPI mocks base method.
func (m *MockClient) QueryAPI(arg0 string) api.QueryAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAPI", arg0)
	ret0, _ := ret[0].(api.QueryAPI)
	return ret0
}

// QueryAPI indicates an expected call of QueryAPI.
func (mr *MockClientMockRecorder) QueryAPI(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAPI", reflect.TypeOf((*MockClient)(nil).QueryAPI), arg0)
}

// Ready mocks base method.
func (m *MockClient) Ready(arg0 context.Context) (*domain.Ready, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ready", arg0)
	ret0, _ := ret[0].(*domain.Ready)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ready indicates an expected call of Ready.
func (mr *MockClientMockRecorder) Ready(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*MockClient)(nil).Ready), arg0)
}

// ServerURL mocks base method.
func (m *MockClient) ServerURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServerURL indicates an expected call of ServerURL.
func (mr *MockClientMockRecorder) ServerURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerURL", reflect.TypeOf((*MockClient)(nil).ServerURL))
}

// Setup mocks base method.
func (m *MockClient) Setup(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 int) (*domain.OnboardingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*domain.OnboardingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Setup indicates an expected call of Setup.
func (mr *MockClientMockRecorder) Setup(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockClient)(nil).Setup), arg0, arg1, arg2, arg3, arg4, arg5)
}

// SetupWithToken mocks base method.
func (m *MockClient) SetupWithToken(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 int, arg6 string) (*domain.OnboardingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupWithToken", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(*domain.OnboardingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetupWithToken indicates an expected call of SetupWithToken.
func (mr *MockClientMockRecorder) SetupWithToken(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupWithToken", reflect.TypeOf((*MockClient)(nil).SetupWithToken), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// TasksAPI mocks base method.
func (m *MockClient) TasksAPI() api.TasksAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TasksAPI")
	ret0, _ := ret[0].(api.TasksAPI)
	return ret0
}

// TasksAPI indicates an expected call of TasksAPI.
func (mr *MockClientMockRecorder) TasksAPI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TasksAPI", reflect.TypeOf((*MockClient)(nil).TasksAPI))
}

// UsersAPI mocks base method.
func (m *MockClient) UsersAPI() api.UsersAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersAPI")
	ret0, _ := ret[0].(api.UsersAPI)
	return ret0
}

// UsersAPI indicates an expected call of UsersAPI.
func (mr *MockClientMockRecorder) UsersAPI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPI", reflect.TypeOf((*MockClient)(nil).UsersAPI))
}

// WriteAPI mocks base method.
func (m *MockClient) WriteAPI(arg0, arg1 string) api.WriteAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAPI", arg0, arg1)
	ret0, _ := ret[0].(api.WriteAPI)
	return ret0
}

// WriteAPI indicates an expected call of WriteAPI.
func (mr *MockClientMockRecorder) WriteAPI(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAPI", reflect.TypeOf((*MockClient)(nil).WriteAPI), arg0, arg1)
}

// WriteAPIBlocking mocks base method.
func (m *MockClient) WriteAPIBlocking(arg0, arg1 string) api.WriteAPIBlocking {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAPIBlocking", arg0, arg1)
	ret0, _ := ret[0].(api.WriteAPIBlocking)
	return ret0
}

// WriteAPIBlocking indicates an expected call of WriteAPIBlocking.
func (mr *MockClientMockRecorder) WriteAPIBlocking(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAPIBlocking", reflect.TypeOf((*MockClient)(nil).WriteAPIBlocking), arg0, arg1)
}
