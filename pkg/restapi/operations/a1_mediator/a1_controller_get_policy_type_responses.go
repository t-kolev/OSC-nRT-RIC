/*
==================================================================================
  Copyright (c) 2021 Samsung

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   This source code is part of the near-RT RIC (RAN Intelligent Controller)
   platform project (RICP).
==================================================================================
*/
// Code generated by go-swagger; DO NOT EDIT.

package a1_mediator

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"gerrit.o-ran-sc.org/r/ric-plt/a1/pkg/models"
)

// A1ControllerGetPolicyTypeOKCode is the HTTP code returned for type A1ControllerGetPolicyTypeOK
const A1ControllerGetPolicyTypeOKCode int = 200

/*A1ControllerGetPolicyTypeOK policy type successfully found

swagger:response a1ControllerGetPolicyTypeOK
*/
type A1ControllerGetPolicyTypeOK struct {

	/*
	  In: Body
	*/
	Payload *models.PolicyTypeSchema `json:"body,omitempty"`
}

// NewA1ControllerGetPolicyTypeOK creates A1ControllerGetPolicyTypeOK with default headers values
func NewA1ControllerGetPolicyTypeOK() *A1ControllerGetPolicyTypeOK {

	return &A1ControllerGetPolicyTypeOK{}
}

// WithPayload adds the payload to the a1 controller get policy type o k response
func (o *A1ControllerGetPolicyTypeOK) WithPayload(payload *models.PolicyTypeSchema) *A1ControllerGetPolicyTypeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the a1 controller get policy type o k response
func (o *A1ControllerGetPolicyTypeOK) SetPayload(payload *models.PolicyTypeSchema) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *A1ControllerGetPolicyTypeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// A1ControllerGetPolicyTypeNotFoundCode is the HTTP code returned for type A1ControllerGetPolicyTypeNotFound
const A1ControllerGetPolicyTypeNotFoundCode int = 404

/*A1ControllerGetPolicyTypeNotFound policy type not found


swagger:response a1ControllerGetPolicyTypeNotFound
*/
type A1ControllerGetPolicyTypeNotFound struct {
}

// NewA1ControllerGetPolicyTypeNotFound creates A1ControllerGetPolicyTypeNotFound with default headers values
func NewA1ControllerGetPolicyTypeNotFound() *A1ControllerGetPolicyTypeNotFound {

	return &A1ControllerGetPolicyTypeNotFound{}
}

// WriteResponse to the client
func (o *A1ControllerGetPolicyTypeNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

// A1ControllerGetPolicyTypeServiceUnavailableCode is the HTTP code returned for type A1ControllerGetPolicyTypeServiceUnavailable
const A1ControllerGetPolicyTypeServiceUnavailableCode int = 503

/*A1ControllerGetPolicyTypeServiceUnavailable Potentially transient backend database error. Client should attempt to retry later.

swagger:response a1ControllerGetPolicyTypeServiceUnavailable
*/
type A1ControllerGetPolicyTypeServiceUnavailable struct {
}

// NewA1ControllerGetPolicyTypeServiceUnavailable creates A1ControllerGetPolicyTypeServiceUnavailable with default headers values
func NewA1ControllerGetPolicyTypeServiceUnavailable() *A1ControllerGetPolicyTypeServiceUnavailable {

	return &A1ControllerGetPolicyTypeServiceUnavailable{}
}

// WriteResponse to the client
func (o *A1ControllerGetPolicyTypeServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(503)
}
