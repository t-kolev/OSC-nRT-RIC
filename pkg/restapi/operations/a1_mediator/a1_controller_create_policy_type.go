/*
==================================================================================
  Copyright (c) 2021 Samsung

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   This source code is part of the near-RT RIC (RAN Intelligent Controller)
   platform project (RICP).
==================================================================================
*/
// Code generated by go-swagger; DO NOT EDIT.

package a1_mediator

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// A1ControllerCreatePolicyTypeHandlerFunc turns a function with the right signature into a a1 controller create policy type handler
type A1ControllerCreatePolicyTypeHandlerFunc func(A1ControllerCreatePolicyTypeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn A1ControllerCreatePolicyTypeHandlerFunc) Handle(params A1ControllerCreatePolicyTypeParams) middleware.Responder {
	return fn(params)
}

// A1ControllerCreatePolicyTypeHandler interface for that can handle valid a1 controller create policy type params
type A1ControllerCreatePolicyTypeHandler interface {
	Handle(A1ControllerCreatePolicyTypeParams) middleware.Responder
}

// NewA1ControllerCreatePolicyType creates a new http.Handler for the a1 controller create policy type operation
func NewA1ControllerCreatePolicyType(ctx *middleware.Context, handler A1ControllerCreatePolicyTypeHandler) *A1ControllerCreatePolicyType {
	return &A1ControllerCreatePolicyType{Context: ctx, Handler: handler}
}

/* A1ControllerCreatePolicyType swagger:route PUT /A1-P/v2/policytypes/{policy_type_id} A1 Mediator a1ControllerCreatePolicyType

Create a new policy type . Replace is not currently allowed; to replace, for now do a DELETE and then a PUT again.


*/
type A1ControllerCreatePolicyType struct {
	Context *middleware.Context
	Handler A1ControllerCreatePolicyTypeHandler
}

func (o *A1ControllerCreatePolicyType) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewA1ControllerCreatePolicyTypeParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
