/*
==================================================================================
  Copyright (c) 2021 Samsung

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   This source code is part of the near-RT RIC (RAN Intelligent Controller)
   platform project (RICP).
==================================================================================
*/
// Code generated by go-swagger; DO NOT EDIT.

package a1_mediator

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"
	"strings"

	"github.com/go-openapi/swag"
)

// A1ControllerCreateOrReplacePolicyInstanceURL generates an URL for the a1 controller create or replace policy instance operation
type A1ControllerCreateOrReplacePolicyInstanceURL struct {
	PolicyInstanceID string
	PolicyTypeID     int64

	NotificationDestination *string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *A1ControllerCreateOrReplacePolicyInstanceURL) WithBasePath(bp string) *A1ControllerCreateOrReplacePolicyInstanceURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *A1ControllerCreateOrReplacePolicyInstanceURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *A1ControllerCreateOrReplacePolicyInstanceURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/A1-P/v2/policytypes/{policy_type_id}/policies/{policy_instance_id}"

	policyInstanceID := o.PolicyInstanceID
	if policyInstanceID != "" {
		_path = strings.Replace(_path, "{policy_instance_id}", policyInstanceID, -1)
	} else {
		return nil, errors.New("policyInstanceId is required on A1ControllerCreateOrReplacePolicyInstanceURL")
	}

	policyTypeID := swag.FormatInt64(o.PolicyTypeID)
	if policyTypeID != "" {
		_path = strings.Replace(_path, "{policy_type_id}", policyTypeID, -1)
	} else {
		return nil, errors.New("policyTypeId is required on A1ControllerCreateOrReplacePolicyInstanceURL")
	}

	_basePath := o._basePath
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var notificationDestinationQ string
	if o.NotificationDestination != nil {
		notificationDestinationQ = *o.NotificationDestination
	}
	if notificationDestinationQ != "" {
		qs.Set("notificationDestination", notificationDestinationQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *A1ControllerCreateOrReplacePolicyInstanceURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *A1ControllerCreateOrReplacePolicyInstanceURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *A1ControllerCreateOrReplacePolicyInstanceURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on A1ControllerCreateOrReplacePolicyInstanceURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on A1ControllerCreateOrReplacePolicyInstanceURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *A1ControllerCreateOrReplacePolicyInstanceURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
