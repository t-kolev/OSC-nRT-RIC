// Code generated by protoc-gen-go.
// source: rc.proto
// DO NOT EDIT!

/*
Package rc is a generated protocol buffer package.

It is generated from these files:
	rc.proto

It has these top-level messages:
	RICE2APHeader
	RICControlHeader
	UeId
	GNBUEID
	Guami
	RICControlMessage
	RicControlGrpcReq
	RicControlGrpcRsp
*/
package rc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RICControlCellTypeEnum int32

const (
	RICControlCellTypeEnum_RIC_CONTROL_CELL_UNKWON RICControlCellTypeEnum = 0
	RICControlCellTypeEnum_RIC_CONTROL_NR_CELL     RICControlCellTypeEnum = 1
	RICControlCellTypeEnum_RIC_CONTROL_EUTRAN_CELL RICControlCellTypeEnum = 2
)

var RICControlCellTypeEnum_name = map[int32]string{
	0: "RIC_CONTROL_CELL_UNKWON",
	1: "RIC_CONTROL_NR_CELL",
	2: "RIC_CONTROL_EUTRAN_CELL",
}
var RICControlCellTypeEnum_value = map[string]int32{
	"RIC_CONTROL_CELL_UNKWON": 0,
	"RIC_CONTROL_NR_CELL":     1,
	"RIC_CONTROL_EUTRAN_CELL": 2,
}

func (x RICControlCellTypeEnum) String() string {
	return proto.EnumName(RICControlCellTypeEnum_name, int32(x))
}
func (RICControlCellTypeEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RICControlAckEnum int32

const (
	RICControlAckEnum_RIC_CONTROL_ACK_UNKWON RICControlAckEnum = 0
	RICControlAckEnum_RIC_CONTROL_NO_ACK     RICControlAckEnum = 1
	RICControlAckEnum_RIC_CONTROL_ACK        RICControlAckEnum = 2
	RICControlAckEnum_RIC_CONTROL_NACK       RICControlAckEnum = 3
)

var RICControlAckEnum_name = map[int32]string{
	0: "RIC_CONTROL_ACK_UNKWON",
	1: "RIC_CONTROL_NO_ACK",
	2: "RIC_CONTROL_ACK",
	3: "RIC_CONTROL_NACK",
}
var RICControlAckEnum_value = map[string]int32{
	"RIC_CONTROL_ACK_UNKWON": 0,
	"RIC_CONTROL_NO_ACK":     1,
	"RIC_CONTROL_ACK":        2,
	"RIC_CONTROL_NACK":       3,
}

func (x RICControlAckEnum) String() string {
	return proto.EnumName(RICControlAckEnum_name, int32(x))
}
func (RICControlAckEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type RICE2APHeader struct {
	RanFuncId      int64 `protobuf:"varint,1,opt,name=RanFuncId" json:"RanFuncId,omitempty"`
	RICRequestorID int64 `protobuf:"varint,2,opt,name=RICRequestorID" json:"RICRequestorID,omitempty"`
}

func (m *RICE2APHeader) Reset()                    { *m = RICE2APHeader{} }
func (m *RICE2APHeader) String() string            { return proto.CompactTextString(m) }
func (*RICE2APHeader) ProtoMessage()               {}
func (*RICE2APHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RICE2APHeader) GetRanFuncId() int64 {
	if m != nil {
		return m.RanFuncId
	}
	return 0
}

func (m *RICE2APHeader) GetRICRequestorID() int64 {
	if m != nil {
		return m.RICRequestorID
	}
	return 0
}

type RICControlHeader struct {
	ControlStyle    int64 `protobuf:"varint,1,opt,name=ControlStyle" json:"ControlStyle,omitempty"`
	ControlActionId int64 `protobuf:"varint,2,opt,name=ControlActionId" json:"ControlActionId,omitempty"`
	UEID            *UeId `protobuf:"bytes,3,opt,name=UEID" json:"UEID,omitempty"`
}

func (m *RICControlHeader) Reset()                    { *m = RICControlHeader{} }
func (m *RICControlHeader) String() string            { return proto.CompactTextString(m) }
func (*RICControlHeader) ProtoMessage()               {}
func (*RICControlHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RICControlHeader) GetControlStyle() int64 {
	if m != nil {
		return m.ControlStyle
	}
	return 0
}

func (m *RICControlHeader) GetControlActionId() int64 {
	if m != nil {
		return m.ControlActionId
	}
	return 0
}

func (m *RICControlHeader) GetUEID() *UeId {
	if m != nil {
		return m.UEID
	}
	return nil
}

type UeId struct {
	GnbUEID *GNBUEID `protobuf:"bytes,1,opt,name=GnbUEID" json:"GnbUEID,omitempty"`
}

func (m *UeId) Reset()                    { *m = UeId{} }
func (m *UeId) String() string            { return proto.CompactTextString(m) }
func (*UeId) ProtoMessage()               {}
func (*UeId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UeId) GetGnbUEID() *GNBUEID {
	if m != nil {
		return m.GnbUEID
	}
	return nil
}

type GNBUEID struct {
	AmfUENGAPID     int64   `protobuf:"varint,1,opt,name=amfUENGAPID" json:"amfUENGAPID,omitempty"`
	Guami           *Guami  `protobuf:"bytes,2,opt,name=guami" json:"guami,omitempty"`
	GNBCUUEF1APID   []int64 `protobuf:"varint,3,rep,packed,name=gNBCUUEF1APID" json:"gNBCUUEF1APID,omitempty"`
	GNBCUCPUEE1APID []int64 `protobuf:"varint,4,rep,packed,name=gNBCUCPUEE1APID" json:"gNBCUCPUEE1APID,omitempty"`
}

func (m *GNBUEID) Reset()                    { *m = GNBUEID{} }
func (m *GNBUEID) String() string            { return proto.CompactTextString(m) }
func (*GNBUEID) ProtoMessage()               {}
func (*GNBUEID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GNBUEID) GetAmfUENGAPID() int64 {
	if m != nil {
		return m.AmfUENGAPID
	}
	return 0
}

func (m *GNBUEID) GetGuami() *Guami {
	if m != nil {
		return m.Guami
	}
	return nil
}

func (m *GNBUEID) GetGNBCUUEF1APID() []int64 {
	if m != nil {
		return m.GNBCUUEF1APID
	}
	return nil
}

func (m *GNBUEID) GetGNBCUCPUEE1APID() []int64 {
	if m != nil {
		return m.GNBCUCPUEE1APID
	}
	return nil
}

type Guami struct {
	PLMNIdentity string `protobuf:"bytes,1,opt,name=pLMNIdentity" json:"pLMNIdentity,omitempty"`
	AMFRegionID  string `protobuf:"bytes,2,opt,name=aMFRegionID" json:"aMFRegionID,omitempty"`
	AMFSetID     string `protobuf:"bytes,3,opt,name=aMFSetID" json:"aMFSetID,omitempty"`
	AMFPointer   string `protobuf:"bytes,4,opt,name=aMFPointer" json:"aMFPointer,omitempty"`
}

func (m *Guami) Reset()                    { *m = Guami{} }
func (m *Guami) String() string            { return proto.CompactTextString(m) }
func (*Guami) ProtoMessage()               {}
func (*Guami) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Guami) GetPLMNIdentity() string {
	if m != nil {
		return m.PLMNIdentity
	}
	return ""
}

func (m *Guami) GetAMFRegionID() string {
	if m != nil {
		return m.AMFRegionID
	}
	return ""
}

func (m *Guami) GetAMFSetID() string {
	if m != nil {
		return m.AMFSetID
	}
	return ""
}

func (m *Guami) GetAMFPointer() string {
	if m != nil {
		return m.AMFPointer
	}
	return ""
}

type RICControlMessage struct {
	RICControlCellTypeVal RICControlCellTypeEnum `protobuf:"varint,1,opt,name=RICControlCellTypeVal,enum=rc.RICControlCellTypeEnum" json:"RICControlCellTypeVal,omitempty"`
	TargetCellID          string                 `protobuf:"bytes,2,opt,name=TargetCellID" json:"TargetCellID,omitempty"`
}

func (m *RICControlMessage) Reset()                    { *m = RICControlMessage{} }
func (m *RICControlMessage) String() string            { return proto.CompactTextString(m) }
func (*RICControlMessage) ProtoMessage()               {}
func (*RICControlMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RICControlMessage) GetRICControlCellTypeVal() RICControlCellTypeEnum {
	if m != nil {
		return m.RICControlCellTypeVal
	}
	return RICControlCellTypeEnum_RIC_CONTROL_CELL_UNKWON
}

func (m *RICControlMessage) GetTargetCellID() string {
	if m != nil {
		return m.TargetCellID
	}
	return ""
}

// RicControl GRPC Req
type RicControlGrpcReq struct {
	E2NodeID              string             `protobuf:"bytes,1,opt,name=e2NodeID" json:"e2NodeID,omitempty"`
	PlmnID                string             `protobuf:"bytes,2,opt,name=plmnID" json:"plmnID,omitempty"`
	RanName               string             `protobuf:"bytes,3,opt,name=ranName" json:"ranName,omitempty"`
	RICE2APHeaderData     *RICE2APHeader     `protobuf:"bytes,4,opt,name=RICE2APHeaderData" json:"RICE2APHeaderData,omitempty"`
	RICControlHeaderData  *RICControlHeader  `protobuf:"bytes,5,opt,name=RICControlHeaderData" json:"RICControlHeaderData,omitempty"`
	RICControlMessageData *RICControlMessage `protobuf:"bytes,6,opt,name=RICControlMessageData" json:"RICControlMessageData,omitempty"`
	RICControlAckReqVal   RICControlAckEnum  `protobuf:"varint,7,opt,name=RICControlAckReqVal,enum=rc.RICControlAckEnum" json:"RICControlAckReqVal,omitempty"`
}

func (m *RicControlGrpcReq) Reset()                    { *m = RicControlGrpcReq{} }
func (m *RicControlGrpcReq) String() string            { return proto.CompactTextString(m) }
func (*RicControlGrpcReq) ProtoMessage()               {}
func (*RicControlGrpcReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RicControlGrpcReq) GetE2NodeID() string {
	if m != nil {
		return m.E2NodeID
	}
	return ""
}

func (m *RicControlGrpcReq) GetPlmnID() string {
	if m != nil {
		return m.PlmnID
	}
	return ""
}

func (m *RicControlGrpcReq) GetRanName() string {
	if m != nil {
		return m.RanName
	}
	return ""
}

func (m *RicControlGrpcReq) GetRICE2APHeaderData() *RICE2APHeader {
	if m != nil {
		return m.RICE2APHeaderData
	}
	return nil
}

func (m *RicControlGrpcReq) GetRICControlHeaderData() *RICControlHeader {
	if m != nil {
		return m.RICControlHeaderData
	}
	return nil
}

func (m *RicControlGrpcReq) GetRICControlMessageData() *RICControlMessage {
	if m != nil {
		return m.RICControlMessageData
	}
	return nil
}

func (m *RicControlGrpcReq) GetRICControlAckReqVal() RICControlAckEnum {
	if m != nil {
		return m.RICControlAckReqVal
	}
	return RICControlAckEnum_RIC_CONTROL_ACK_UNKWON
}

// RicControlGrpc Rsp
type RicControlGrpcRsp struct {
	RspCode     int32  `protobuf:"varint,1,opt,name=rspCode" json:"rspCode,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (m *RicControlGrpcRsp) Reset()                    { *m = RicControlGrpcRsp{} }
func (m *RicControlGrpcRsp) String() string            { return proto.CompactTextString(m) }
func (*RicControlGrpcRsp) ProtoMessage()               {}
func (*RicControlGrpcRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RicControlGrpcRsp) GetRspCode() int32 {
	if m != nil {
		return m.RspCode
	}
	return 0
}

func (m *RicControlGrpcRsp) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterType((*RICE2APHeader)(nil), "rc.RICE2APHeader")
	proto.RegisterType((*RICControlHeader)(nil), "rc.RICControlHeader")
	proto.RegisterType((*UeId)(nil), "rc.UeId")
	proto.RegisterType((*GNBUEID)(nil), "rc.gNBUEID")
	proto.RegisterType((*Guami)(nil), "rc.Guami")
	proto.RegisterType((*RICControlMessage)(nil), "rc.RICControlMessage")
	proto.RegisterType((*RicControlGrpcReq)(nil), "rc.RicControlGrpcReq")
	proto.RegisterType((*RicControlGrpcRsp)(nil), "rc.RicControlGrpcRsp")
	proto.RegisterEnum("rc.RICControlCellTypeEnum", RICControlCellTypeEnum_name, RICControlCellTypeEnum_value)
	proto.RegisterEnum("rc.RICControlAckEnum", RICControlAckEnum_name, RICControlAckEnum_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MsgComm service

type MsgCommClient interface {
	// gRPC call to Send RICControlReqServiceGrpc
	SendRICControlReqServiceGrpc(ctx context.Context, in *RicControlGrpcReq, opts ...grpc.CallOption) (*RicControlGrpcRsp, error)
}

type msgCommClient struct {
	cc *grpc.ClientConn
}

func NewMsgCommClient(cc *grpc.ClientConn) MsgCommClient {
	return &msgCommClient{cc}
}

func (c *msgCommClient) SendRICControlReqServiceGrpc(ctx context.Context, in *RicControlGrpcReq, opts ...grpc.CallOption) (*RicControlGrpcRsp, error) {
	out := new(RicControlGrpcRsp)
	err := grpc.Invoke(ctx, "/rc.MsgComm/SendRICControlReqServiceGrpc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MsgComm service

type MsgCommServer interface {
	// gRPC call to Send RICControlReqServiceGrpc
	SendRICControlReqServiceGrpc(context.Context, *RicControlGrpcReq) (*RicControlGrpcRsp, error)
}

func RegisterMsgCommServer(s *grpc.Server, srv MsgCommServer) {
	s.RegisterService(&_MsgComm_serviceDesc, srv)
}

func _MsgComm_SendRICControlReqServiceGrpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RicControlGrpcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgCommServer).SendRICControlReqServiceGrpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rc.MsgComm/SendRICControlReqServiceGrpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgCommServer).SendRICControlReqServiceGrpc(ctx, req.(*RicControlGrpcReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _MsgComm_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rc.MsgComm",
	HandlerType: (*MsgCommServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendRICControlReqServiceGrpc",
			Handler:    _MsgComm_SendRICControlReqServiceGrpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rc.proto",
}

func init() { proto.RegisterFile("rc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 692 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0xcd, 0x6e, 0xda, 0x40,
	0x10, 0xc7, 0x6b, 0x0c, 0x21, 0x0c, 0x4d, 0x42, 0x36, 0x5f, 0x88, 0x46, 0x2d, 0xb2, 0xda, 0x0a,
	0x45, 0x6a, 0xa4, 0xd2, 0x07, 0xa8, 0x88, 0x63, 0x88, 0x15, 0x30, 0x68, 0xc0, 0xcd, 0x31, 0x72,
	0xec, 0x2d, 0x42, 0xc1, 0x1f, 0xac, 0x4d, 0xa5, 0x5c, 0x7a, 0xe8, 0xad, 0xef, 0xd0, 0x87, 0xad,
	0x76, 0x59, 0x30, 0x76, 0x38, 0xce, 0x6f, 0x3e, 0x76, 0xe6, 0x3f, 0xbb, 0x0b, 0xfb, 0xcc, 0xbd,
	0x8e, 0x58, 0x98, 0x84, 0xa4, 0xc0, 0x5c, 0xcd, 0x86, 0x03, 0x34, 0x75, 0xa3, 0xdd, 0x19, 0xdd,
	0x51, 0xc7, 0xa3, 0x8c, 0x5c, 0x42, 0x05, 0x9d, 0xa0, 0xbb, 0x0c, 0x5c, 0xd3, 0xab, 0x2b, 0x4d,
	0xa5, 0xa5, 0x62, 0x0a, 0xc8, 0x67, 0x38, 0x44, 0x53, 0x47, 0xba, 0x58, 0xd2, 0x38, 0x09, 0x99,
	0x79, 0x5b, 0x2f, 0x88, 0x90, 0x1c, 0xd5, 0x7e, 0x43, 0x0d, 0x4d, 0x5d, 0x0f, 0x83, 0x84, 0x85,
	0x73, 0x59, 0x59, 0x83, 0xb7, 0x12, 0x8c, 0x93, 0x97, 0x39, 0x95, 0xc5, 0x33, 0x8c, 0xb4, 0xe0,
	0x48, 0xda, 0x1d, 0x37, 0x99, 0x85, 0x81, 0xe9, 0xc9, 0x03, 0xf2, 0x98, 0x5c, 0x42, 0xd1, 0x36,
	0xcc, 0xdb, 0xba, 0xda, 0x54, 0x5a, 0xd5, 0xf6, 0xfe, 0x35, 0x73, 0xaf, 0x6d, 0x6a, 0x7a, 0x28,
	0xa8, 0xf6, 0x05, 0x8a, 0xdc, 0x22, 0x9f, 0xa0, 0xdc, 0x0b, 0x9e, 0x44, 0xa0, 0x22, 0x02, 0xab,
	0x3c, 0x70, 0x6a, 0xdd, 0x70, 0x84, 0x6b, 0x9f, 0xf6, 0x4f, 0x81, 0xb2, 0x84, 0xa4, 0x09, 0x55,
	0xc7, 0xff, 0x69, 0x1b, 0x56, 0xaf, 0x33, 0x92, 0x69, 0x2a, 0x6e, 0x23, 0xf2, 0x01, 0x4a, 0xd3,
	0xa5, 0xe3, 0xcf, 0x44, 0x6b, 0xd5, 0x76, 0x85, 0x97, 0xec, 0x71, 0x80, 0x2b, 0x4e, 0x3e, 0xc2,
	0xc1, 0xd4, 0xba, 0xd1, 0x6d, 0xdb, 0xe8, 0x7e, 0x15, 0x45, 0xd4, 0xa6, 0xda, 0x52, 0x31, 0x0b,
	0xf9, 0xac, 0x02, 0xe8, 0x23, 0xdb, 0x30, 0x56, 0x71, 0x45, 0x11, 0x97, 0xc7, 0xda, 0x5f, 0x05,
	0x4a, 0xe2, 0x00, 0xae, 0x61, 0xd4, 0x1f, 0x58, 0xa6, 0x47, 0x83, 0x64, 0x96, 0xbc, 0x88, 0xee,
	0x2a, 0x98, 0x61, 0x62, 0x80, 0x41, 0x17, 0xe9, 0x94, 0x0b, 0xb5, 0x5a, 0x50, 0x05, 0xb7, 0x11,
	0x69, 0xc0, 0xbe, 0x33, 0xe8, 0x8e, 0x69, 0x22, 0xf5, 0xab, 0xe0, 0xc6, 0x26, 0xef, 0x01, 0x9c,
	0x41, 0x77, 0x14, 0xce, 0x82, 0x84, 0xb2, 0x7a, 0x51, 0x78, 0xb7, 0x08, 0xef, 0xe5, 0x38, 0x5d,
	0xed, 0x80, 0xc6, 0xb1, 0x33, 0xa5, 0x64, 0x04, 0x67, 0x29, 0xd4, 0xe9, 0x7c, 0x3e, 0x79, 0x89,
	0xe8, 0x0f, 0x67, 0x2e, 0x1a, 0x3c, 0x6c, 0x37, 0xb8, 0x44, 0xaf, 0x03, 0x8c, 0x60, 0xe9, 0xe3,
	0xee, 0x44, 0x3e, 0xe9, 0xc4, 0x61, 0x53, 0x9a, 0x70, 0xb8, 0x19, 0x23, 0xc3, 0xb4, 0x3f, 0x2a,
	0x1c, 0xe3, 0xcc, 0x95, 0xd9, 0x3d, 0x16, 0xb9, 0x48, 0x17, 0x7c, 0x3a, 0xda, 0xb6, 0x42, 0x8f,
	0xca, 0xed, 0x55, 0x70, 0x63, 0x93, 0x73, 0xd8, 0x8b, 0xe6, 0x7e, 0x2a, 0x8b, 0xb4, 0x48, 0x1d,
	0xca, 0xcc, 0x09, 0x2c, 0xc7, 0xa7, 0x52, 0x90, 0xb5, 0x49, 0xbe, 0x8b, 0x71, 0xd3, 0x07, 0x72,
	0xeb, 0x24, 0x8e, 0x90, 0xa5, 0xda, 0x3e, 0x96, 0x53, 0xa5, 0x4e, 0x7c, 0x1d, 0x4b, 0xee, 0xe0,
	0x34, 0xff, 0x14, 0x44, 0x8d, 0x92, 0xa8, 0x71, 0x9a, 0x55, 0x46, 0x96, 0xd9, 0x99, 0x41, 0xee,
	0xb7, 0x45, 0x96, 0xca, 0x8b, 0x52, 0x7b, 0xa2, 0xd4, 0x59, 0xb6, 0x94, 0x0c, 0xc0, 0xdd, 0x39,
	0xa4, 0x07, 0x27, 0xa9, 0xa3, 0xe3, 0x3e, 0x23, 0x5d, 0xf0, 0x7d, 0x95, 0xc5, 0xbe, 0x72, 0xa5,
	0x3a, 0xee, 0xb3, 0x58, 0xd5, 0xae, 0x0c, 0x6d, 0xf8, 0x6a, 0x07, 0x71, 0x24, 0xf4, 0x8c, 0x23,
	0x3d, 0xf4, 0x56, 0xcf, 0xbc, 0x84, 0x6b, 0x93, 0xdf, 0x4e, 0x8f, 0xc6, 0x2e, 0x9b, 0x45, 0xfc,
	0x21, 0xaf, 0x6f, 0xe7, 0x16, 0xba, 0x7a, 0x86, 0xf3, 0xdd, 0x57, 0x85, 0xbc, 0x83, 0x0b, 0x34,
	0xf5, 0x47, 0x7d, 0x68, 0x4d, 0x70, 0xd8, 0x7f, 0xd4, 0x8d, 0x7e, 0xff, 0xd1, 0xb6, 0xee, 0x1f,
	0x86, 0x56, 0xed, 0x0d, 0xb9, 0x10, 0x03, 0x6d, 0x9c, 0x16, 0x0a, 0x7f, 0x4d, 0xc9, 0x67, 0x19,
	0xf6, 0x04, 0x3b, 0xd6, 0xca, 0x59, 0xb8, 0x62, 0xdb, 0xb7, 0x59, 0xce, 0x49, 0x1a, 0xa2, 0x83,
	0x4d, 0x46, 0x47, 0xbf, 0x4f, 0x8f, 0x39, 0x07, 0x92, 0x39, 0x66, 0xc8, 0xdd, 0x35, 0x85, 0x9c,
	0xc0, 0x51, 0x2e, 0xa7, 0x56, 0x20, 0xa7, 0xe2, 0x1b, 0x4c, 0x83, 0x39, 0x55, 0xdb, 0x0f, 0x50,
	0x1e, 0xc4, 0x53, 0x3d, 0xf4, 0x7d, 0xd2, 0x87, 0xcb, 0x31, 0x0d, 0xbc, 0xb4, 0x05, 0xa4, 0x8b,
	0x31, 0x65, 0xbf, 0x66, 0x2e, 0xe5, 0x52, 0x92, 0xd5, 0x22, 0xf2, 0x57, 0xbc, 0xb1, 0x0b, 0xc7,
	0xd1, 0xd3, 0x9e, 0xf8, 0xd7, 0xbf, 0xfd, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x53, 0x8b, 0xc3,
	0xe3, 0x05, 0x00, 0x00,
}
